// source: yeying/api/common/message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var yeying_api_common_code_pb = require('../../../yeying/api/common/code_pb.js');
goog.object.extend(proto, yeying_api_common_code_pb);
goog.exportSymbol('proto.yeying.api.common.BlockAddress', null, global);
goog.exportSymbol('proto.yeying.api.common.IdentityApplicationExtend', null, global);
goog.exportSymbol('proto.yeying.api.common.IdentityMetadata', null, global);
goog.exportSymbol('proto.yeying.api.common.IdentityOrganizationExtend', null, global);
goog.exportSymbol('proto.yeying.api.common.IdentityPersonalExtend', null, global);
goog.exportSymbol('proto.yeying.api.common.IdentityServiceExtend', null, global);
goog.exportSymbol('proto.yeying.api.common.MessageHeader', null, global);
goog.exportSymbol('proto.yeying.api.common.Mnemonic', null, global);
goog.exportSymbol('proto.yeying.api.common.RequestPage', null, global);
goog.exportSymbol('proto.yeying.api.common.ResponsePage', null, global);
goog.exportSymbol('proto.yeying.api.common.ResponseStatus', null, global);
goog.exportSymbol('proto.yeying.api.common.SecurityAlgorithm', null, global);
goog.exportSymbol('proto.yeying.api.common.SecurityConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.MessageHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.MessageHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.MessageHeader.displayName = 'proto.yeying.api.common.MessageHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.ResponseStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.ResponseStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.ResponseStatus.displayName = 'proto.yeying.api.common.ResponseStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.ResponsePage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.ResponsePage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.ResponsePage.displayName = 'proto.yeying.api.common.ResponsePage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.RequestPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.RequestPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.RequestPage.displayName = 'proto.yeying.api.common.RequestPage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.IdentityMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.IdentityMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.IdentityMetadata.displayName = 'proto.yeying.api.common.IdentityMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.BlockAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.BlockAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.BlockAddress.displayName = 'proto.yeying.api.common.BlockAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.Mnemonic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.Mnemonic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.Mnemonic.displayName = 'proto.yeying.api.common.Mnemonic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.IdentityServiceExtend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.IdentityServiceExtend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.IdentityServiceExtend.displayName = 'proto.yeying.api.common.IdentityServiceExtend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.IdentityOrganizationExtend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.IdentityOrganizationExtend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.IdentityOrganizationExtend.displayName = 'proto.yeying.api.common.IdentityOrganizationExtend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.IdentityPersonalExtend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.IdentityPersonalExtend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.IdentityPersonalExtend.displayName = 'proto.yeying.api.common.IdentityPersonalExtend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.IdentityApplicationExtend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.common.IdentityApplicationExtend.repeatedFields_, null);
};
goog.inherits(proto.yeying.api.common.IdentityApplicationExtend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.IdentityApplicationExtend.displayName = 'proto.yeying.api.common.IdentityApplicationExtend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.SecurityConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.SecurityConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.SecurityConfig.displayName = 'proto.yeying.api.common.SecurityConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.common.SecurityAlgorithm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.common.SecurityAlgorithm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.common.SecurityAlgorithm.displayName = 'proto.yeying.api.common.SecurityAlgorithm';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.MessageHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.MessageHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.MessageHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.MessageHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authcontent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.common.MessageHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.MessageHeader;
  return proto.yeying.api.common.MessageHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.MessageHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.common.MessageHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 2:
      var value = /** @type {!proto.yeying.api.common.AuthenticateTypeEnum} */ (reader.readEnum());
      msg.setAuthtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthcontent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.MessageHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.MessageHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.MessageHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.MessageHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAuthcontent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.yeying.api.common.MessageHeader.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AuthenticateTypeEnum authType = 2;
 * @return {!proto.yeying.api.common.AuthenticateTypeEnum}
 */
proto.yeying.api.common.MessageHeader.prototype.getAuthtype = function() {
  return /** @type {!proto.yeying.api.common.AuthenticateTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yeying.api.common.AuthenticateTypeEnum} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setAuthtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string authContent = 3;
 * @return {string}
 */
proto.yeying.api.common.MessageHeader.prototype.getAuthcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setAuthcontent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nonce = 4;
 * @return {string}
 */
proto.yeying.api.common.MessageHeader.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.yeying.api.common.MessageHeader.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 version = 6;
 * @return {number}
 */
proto.yeying.api.common.MessageHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.MessageHeader} returns this
 */
proto.yeying.api.common.MessageHeader.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.ResponseStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.ResponseStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.ResponseStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.ResponseStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.ResponseStatus}
 */
proto.yeying.api.common.ResponseStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.ResponseStatus;
  return proto.yeying.api.common.ResponseStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.ResponseStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.ResponseStatus}
 */
proto.yeying.api.common.ResponseStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yeying.api.common.ResponseCodeEnum} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.ResponseStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.ResponseStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.ResponseStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.ResponseStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResponseCodeEnum code = 1;
 * @return {!proto.yeying.api.common.ResponseCodeEnum}
 */
proto.yeying.api.common.ResponseStatus.prototype.getCode = function() {
  return /** @type {!proto.yeying.api.common.ResponseCodeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yeying.api.common.ResponseCodeEnum} value
 * @return {!proto.yeying.api.common.ResponseStatus} returns this
 */
proto.yeying.api.common.ResponseStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.yeying.api.common.ResponseStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.ResponseStatus} returns this
 */
proto.yeying.api.common.ResponseStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.ResponsePage.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.ResponsePage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.ResponsePage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.ResponsePage.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.ResponsePage}
 */
proto.yeying.api.common.ResponsePage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.ResponsePage;
  return proto.yeying.api.common.ResponsePage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.ResponsePage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.ResponsePage}
 */
proto.yeying.api.common.ResponsePage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.ResponsePage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.ResponsePage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.ResponsePage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.ResponsePage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 total = 1;
 * @return {number}
 */
proto.yeying.api.common.ResponsePage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.ResponsePage} returns this
 */
proto.yeying.api.common.ResponsePage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 page = 3;
 * @return {number}
 */
proto.yeying.api.common.ResponsePage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.ResponsePage} returns this
 */
proto.yeying.api.common.ResponsePage.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 pageSize = 4;
 * @return {number}
 */
proto.yeying.api.common.ResponsePage.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.ResponsePage} returns this
 */
proto.yeying.api.common.ResponsePage.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.RequestPage.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.RequestPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.RequestPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.RequestPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.RequestPage}
 */
proto.yeying.api.common.RequestPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.RequestPage;
  return proto.yeying.api.common.RequestPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.RequestPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.RequestPage}
 */
proto.yeying.api.common.RequestPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.RequestPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.RequestPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.RequestPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.RequestPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 page = 1;
 * @return {number}
 */
proto.yeying.api.common.RequestPage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.RequestPage} returns this
 */
proto.yeying.api.common.RequestPage.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pageSize = 2;
 * @return {number}
 */
proto.yeying.api.common.RequestPage.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.RequestPage} returns this
 */
proto.yeying.api.common.RequestPage.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.IdentityMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.IdentityMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.IdentityMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, 0),
    did: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    address: jspb.Message.getFieldWithDefault(msg, 5, ""),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    code: jspb.Message.getFieldWithDefault(msg, 8, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 9, ""),
    created: jspb.Message.getFieldWithDefault(msg, 10, ""),
    checkpoint: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.IdentityMetadata}
 */
proto.yeying.api.common.IdentityMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.IdentityMetadata;
  return proto.yeying.api.common.IdentityMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.IdentityMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.IdentityMetadata}
 */
proto.yeying.api.common.IdentityMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {!proto.yeying.api.common.NetworkTypeEnum} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {!proto.yeying.api.common.IdentityCodeEnum} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.IdentityMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.IdentityMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.IdentityMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCheckpoint();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string parent = 1;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NetworkTypeEnum network = 2;
 * @return {!proto.yeying.api.common.NetworkTypeEnum}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getNetwork = function() {
  return /** @type {!proto.yeying.api.common.NetworkTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yeying.api.common.NetworkTypeEnum} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string did = 3;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 version = 4;
 * @return {number}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string address = 5;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional IdentityCodeEnum code = 8;
 * @return {!proto.yeying.api.common.IdentityCodeEnum}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getCode = function() {
  return /** @type {!proto.yeying.api.common.IdentityCodeEnum} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.yeying.api.common.IdentityCodeEnum} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string avatar = 9;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string created = 10;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string checkpoint = 11;
 * @return {string}
 */
proto.yeying.api.common.IdentityMetadata.prototype.getCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityMetadata} returns this
 */
proto.yeying.api.common.IdentityMetadata.prototype.setCheckpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.BlockAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.BlockAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.BlockAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.BlockAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    privatekey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    publickey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mnemonic: (f = msg.getMnemonic()) && proto.yeying.api.common.Mnemonic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.BlockAddress}
 */
proto.yeying.api.common.BlockAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.BlockAddress;
  return proto.yeying.api.common.BlockAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.BlockAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.BlockAddress}
 */
proto.yeying.api.common.BlockAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivatekey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 5:
      var value = new proto.yeying.api.common.Mnemonic;
      reader.readMessage(value,proto.yeying.api.common.Mnemonic.deserializeBinaryFromReader);
      msg.setMnemonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.BlockAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.BlockAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.BlockAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.BlockAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivatekey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMnemonic();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.yeying.api.common.Mnemonic.serializeBinaryToWriter
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.yeying.api.common.BlockAddress.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.BlockAddress} returns this
 */
proto.yeying.api.common.BlockAddress.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.yeying.api.common.BlockAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.BlockAddress} returns this
 */
proto.yeying.api.common.BlockAddress.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string privateKey = 3;
 * @return {string}
 */
proto.yeying.api.common.BlockAddress.prototype.getPrivatekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.BlockAddress} returns this
 */
proto.yeying.api.common.BlockAddress.prototype.setPrivatekey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string publicKey = 4;
 * @return {string}
 */
proto.yeying.api.common.BlockAddress.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.BlockAddress} returns this
 */
proto.yeying.api.common.BlockAddress.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Mnemonic mnemonic = 5;
 * @return {?proto.yeying.api.common.Mnemonic}
 */
proto.yeying.api.common.BlockAddress.prototype.getMnemonic = function() {
  return /** @type{?proto.yeying.api.common.Mnemonic} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.Mnemonic, 5));
};


/**
 * @param {?proto.yeying.api.common.Mnemonic|undefined} value
 * @return {!proto.yeying.api.common.BlockAddress} returns this
*/
proto.yeying.api.common.BlockAddress.prototype.setMnemonic = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.BlockAddress} returns this
 */
proto.yeying.api.common.BlockAddress.prototype.clearMnemonic = function() {
  return this.setMnemonic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.BlockAddress.prototype.hasMnemonic = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.Mnemonic.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.Mnemonic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.Mnemonic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.Mnemonic.toObject = function(includeInstance, msg) {
  var f, obj = {
    phrase: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locale: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.Mnemonic}
 */
proto.yeying.api.common.Mnemonic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.Mnemonic;
  return proto.yeying.api.common.Mnemonic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.Mnemonic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.Mnemonic}
 */
proto.yeying.api.common.Mnemonic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhrase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.Mnemonic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.Mnemonic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.Mnemonic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.Mnemonic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhrase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string phrase = 1;
 * @return {string}
 */
proto.yeying.api.common.Mnemonic.prototype.getPhrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.Mnemonic} returns this
 */
proto.yeying.api.common.Mnemonic.prototype.setPhrase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.yeying.api.common.Mnemonic.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.Mnemonic} returns this
 */
proto.yeying.api.common.Mnemonic.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locale = 3;
 * @return {string}
 */
proto.yeying.api.common.Mnemonic.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.Mnemonic} returns this
 */
proto.yeying.api.common.Mnemonic.prototype.setLocale = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.yeying.api.common.Mnemonic.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.Mnemonic} returns this
 */
proto.yeying.api.common.Mnemonic.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.IdentityServiceExtend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.IdentityServiceExtend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityServiceExtend.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apis: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proxy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    grpc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    securityconfig: (f = msg.getSecurityconfig()) && proto.yeying.api.common.SecurityConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.IdentityServiceExtend}
 */
proto.yeying.api.common.IdentityServiceExtend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.IdentityServiceExtend;
  return proto.yeying.api.common.IdentityServiceExtend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.IdentityServiceExtend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.IdentityServiceExtend}
 */
proto.yeying.api.common.IdentityServiceExtend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yeying.api.common.ServiceCodeEnum} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApis(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpc(value);
      break;
    case 5:
      var value = new proto.yeying.api.common.SecurityConfig;
      reader.readMessage(value,proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader);
      msg.setSecurityconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.IdentityServiceExtend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.IdentityServiceExtend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityServiceExtend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getApis();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProxy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGrpc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecurityconfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ServiceCodeEnum code = 1;
 * @return {!proto.yeying.api.common.ServiceCodeEnum}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.getCode = function() {
  return /** @type {!proto.yeying.api.common.ServiceCodeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yeying.api.common.ServiceCodeEnum} value
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string apis = 2;
 * @return {string}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.getApis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.setApis = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string proxy = 3;
 * @return {string}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.getProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.setProxy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string grpc = 4;
 * @return {string}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.getGrpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.setGrpc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SecurityConfig securityConfig = 5;
 * @return {?proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.getSecurityconfig = function() {
  return /** @type{?proto.yeying.api.common.SecurityConfig} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.SecurityConfig, 5));
};


/**
 * @param {?proto.yeying.api.common.SecurityConfig|undefined} value
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
*/
proto.yeying.api.common.IdentityServiceExtend.prototype.setSecurityconfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.IdentityServiceExtend} returns this
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.clearSecurityconfig = function() {
  return this.setSecurityconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.IdentityServiceExtend.prototype.hasSecurityconfig = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.IdentityOrganizationExtend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.IdentityOrganizationExtend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityOrganizationExtend.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    securityconfig: (f = msg.getSecurityconfig()) && proto.yeying.api.common.SecurityConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend}
 */
proto.yeying.api.common.IdentityOrganizationExtend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.IdentityOrganizationExtend;
  return proto.yeying.api.common.IdentityOrganizationExtend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.IdentityOrganizationExtend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend}
 */
proto.yeying.api.common.IdentityOrganizationExtend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.yeying.api.common.SecurityConfig;
      reader.readMessage(value,proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader);
      msg.setSecurityconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.IdentityOrganizationExtend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.IdentityOrganizationExtend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityOrganizationExtend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecurityconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend} returns this
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend} returns this
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SecurityConfig securityConfig = 3;
 * @return {?proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.getSecurityconfig = function() {
  return /** @type{?proto.yeying.api.common.SecurityConfig} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.SecurityConfig, 3));
};


/**
 * @param {?proto.yeying.api.common.SecurityConfig|undefined} value
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend} returns this
*/
proto.yeying.api.common.IdentityOrganizationExtend.prototype.setSecurityconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.IdentityOrganizationExtend} returns this
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.clearSecurityconfig = function() {
  return this.setSecurityconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.IdentityOrganizationExtend.prototype.hasSecurityconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.IdentityPersonalExtend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.IdentityPersonalExtend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityPersonalExtend.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    telephone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    securityconfig: (f = msg.getSecurityconfig()) && proto.yeying.api.common.SecurityConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.IdentityPersonalExtend}
 */
proto.yeying.api.common.IdentityPersonalExtend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.IdentityPersonalExtend;
  return proto.yeying.api.common.IdentityPersonalExtend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.IdentityPersonalExtend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.IdentityPersonalExtend}
 */
proto.yeying.api.common.IdentityPersonalExtend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephone(value);
      break;
    case 3:
      var value = new proto.yeying.api.common.SecurityConfig;
      reader.readMessage(value,proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader);
      msg.setSecurityconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.IdentityPersonalExtend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.IdentityPersonalExtend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityPersonalExtend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTelephone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecurityconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityPersonalExtend} returns this
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string telephone = 2;
 * @return {string}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.getTelephone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityPersonalExtend} returns this
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.setTelephone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SecurityConfig securityConfig = 3;
 * @return {?proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.getSecurityconfig = function() {
  return /** @type{?proto.yeying.api.common.SecurityConfig} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.SecurityConfig, 3));
};


/**
 * @param {?proto.yeying.api.common.SecurityConfig|undefined} value
 * @return {!proto.yeying.api.common.IdentityPersonalExtend} returns this
*/
proto.yeying.api.common.IdentityPersonalExtend.prototype.setSecurityconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.IdentityPersonalExtend} returns this
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.clearSecurityconfig = function() {
  return this.setSecurityconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.IdentityPersonalExtend.prototype.hasSecurityconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yeying.api.common.IdentityApplicationExtend.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.IdentityApplicationExtend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.IdentityApplicationExtend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityApplicationExtend.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servicecodesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    location: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    securityconfig: (f = msg.getSecurityconfig()) && proto.yeying.api.common.SecurityConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.IdentityApplicationExtend}
 */
proto.yeying.api.common.IdentityApplicationExtend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.IdentityApplicationExtend;
  return proto.yeying.api.common.IdentityApplicationExtend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.IdentityApplicationExtend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.IdentityApplicationExtend}
 */
proto.yeying.api.common.IdentityApplicationExtend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.yeying.api.common.ServiceCodeEnum>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addServicecodes(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 5:
      var value = new proto.yeying.api.common.SecurityConfig;
      reader.readMessage(value,proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader);
      msg.setSecurityconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.IdentityApplicationExtend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.IdentityApplicationExtend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.IdentityApplicationExtend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getServicecodesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecurityconfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApplicationCodeEnum code = 1;
 * @return {!proto.yeying.api.common.ApplicationCodeEnum}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.getCode = function() {
  return /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yeying.api.common.ApplicationCodeEnum} value
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ServiceCodeEnum serviceCodes = 2;
 * @return {!Array<!proto.yeying.api.common.ServiceCodeEnum>}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.getServicecodesList = function() {
  return /** @type {!Array<!proto.yeying.api.common.ServiceCodeEnum>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.yeying.api.common.ServiceCodeEnum>} value
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.setServicecodesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.yeying.api.common.ServiceCodeEnum} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.addServicecodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.clearServicecodesList = function() {
  return this.setServicecodesList([]);
};


/**
 * optional string location = 3;
 * @return {string}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SecurityConfig securityConfig = 5;
 * @return {?proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.getSecurityconfig = function() {
  return /** @type{?proto.yeying.api.common.SecurityConfig} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.SecurityConfig, 5));
};


/**
 * @param {?proto.yeying.api.common.SecurityConfig|undefined} value
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
*/
proto.yeying.api.common.IdentityApplicationExtend.prototype.setSecurityconfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.IdentityApplicationExtend} returns this
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.clearSecurityconfig = function() {
  return this.setSecurityconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.IdentityApplicationExtend.prototype.hasSecurityconfig = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.SecurityConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.SecurityConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.SecurityConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.SecurityConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: (f = msg.getAlgorithm()) && proto.yeying.api.common.SecurityAlgorithm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.SecurityConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.SecurityConfig;
  return proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.SecurityConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.SecurityConfig}
 */
proto.yeying.api.common.SecurityConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.yeying.api.common.SecurityAlgorithm;
      reader.readMessage(value,proto.yeying.api.common.SecurityAlgorithm.deserializeBinaryFromReader);
      msg.setAlgorithm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.SecurityConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.SecurityConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.SecurityConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.yeying.api.common.SecurityAlgorithm.serializeBinaryToWriter
    );
  }
};


/**
 * optional SecurityAlgorithm algorithm = 1;
 * @return {?proto.yeying.api.common.SecurityAlgorithm}
 */
proto.yeying.api.common.SecurityConfig.prototype.getAlgorithm = function() {
  return /** @type{?proto.yeying.api.common.SecurityAlgorithm} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.common.SecurityAlgorithm, 1));
};


/**
 * @param {?proto.yeying.api.common.SecurityAlgorithm|undefined} value
 * @return {!proto.yeying.api.common.SecurityConfig} returns this
*/
proto.yeying.api.common.SecurityConfig.prototype.setAlgorithm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.common.SecurityConfig} returns this
 */
proto.yeying.api.common.SecurityConfig.prototype.clearAlgorithm = function() {
  return this.setAlgorithm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.common.SecurityConfig.prototype.hasAlgorithm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.common.SecurityAlgorithm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.common.SecurityAlgorithm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.SecurityAlgorithm.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    iv: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.common.SecurityAlgorithm}
 */
proto.yeying.api.common.SecurityAlgorithm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.common.SecurityAlgorithm;
  return proto.yeying.api.common.SecurityAlgorithm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.common.SecurityAlgorithm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.common.SecurityAlgorithm}
 */
proto.yeying.api.common.SecurityAlgorithm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yeying.api.common.CipherTypeEnum} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.common.SecurityAlgorithm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.common.SecurityAlgorithm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.common.SecurityAlgorithm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIv();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CipherTypeEnum type = 1;
 * @return {!proto.yeying.api.common.CipherTypeEnum}
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.getType = function() {
  return /** @type {!proto.yeying.api.common.CipherTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yeying.api.common.CipherTypeEnum} value
 * @return {!proto.yeying.api.common.SecurityAlgorithm} returns this
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string iv = 2;
 * @return {string}
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.getIv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.common.SecurityAlgorithm} returns this
 */
proto.yeying.api.common.SecurityAlgorithm.prototype.setIv = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.yeying.api.common);
