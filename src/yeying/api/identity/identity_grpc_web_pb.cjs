/**
 * @fileoverview gRPC-Web generated client stub for yeying.api.identity
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.0
// source: yeying/api/identity/identity.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var yeying_api_common_message_pb = require('../../../yeying/api/common/message_pb.cjs')

var yeying_api_common_code_pb = require('../../../yeying/api/common/code_pb.cjs')
const proto = {};
proto.yeying = {};
proto.yeying.api = {};
proto.yeying.api.identity = require('./identity_pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.identity.IdentityClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.identity.IdentityPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.identity.RegisterRequest,
 *   !proto.yeying.api.identity.RegisterResponse>}
 */
const methodDescriptor_Identity_Register = new grpc.web.MethodDescriptor(
  '/yeying.api.identity.Identity/Register',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.identity.RegisterRequest,
  proto.yeying.api.identity.RegisterResponse,
  /**
   * @param {!proto.yeying.api.identity.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.identity.RegisterResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.identity.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.identity.IdentityClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.identity.Identity/Register',
      request,
      metadata || {},
      methodDescriptor_Identity_Register,
      callback);
};


/**
 * @param {!proto.yeying.api.identity.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.identity.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.identity.IdentityPromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.identity.Identity/Register',
      request,
      metadata || {},
      methodDescriptor_Identity_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.identity.SearchRequest,
 *   !proto.yeying.api.identity.SearchResponse>}
 */
const methodDescriptor_Identity_Search = new grpc.web.MethodDescriptor(
  '/yeying.api.identity.Identity/Search',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.identity.SearchRequest,
  proto.yeying.api.identity.SearchResponse,
  /**
   * @param {!proto.yeying.api.identity.SearchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.identity.SearchResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.identity.SearchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.SearchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.SearchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.identity.IdentityClient.prototype.search =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.identity.Identity/Search',
      request,
      metadata || {},
      methodDescriptor_Identity_Search,
      callback);
};


/**
 * @param {!proto.yeying.api.identity.SearchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.identity.SearchResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.identity.IdentityPromiseClient.prototype.search =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.identity.Identity/Search',
      request,
      metadata || {},
      methodDescriptor_Identity_Search);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.identity.UnregisterRequest,
 *   !proto.yeying.api.identity.UnregisterResponse>}
 */
const methodDescriptor_Identity_Unregister = new grpc.web.MethodDescriptor(
  '/yeying.api.identity.Identity/Unregister',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.identity.UnregisterRequest,
  proto.yeying.api.identity.UnregisterResponse,
  /**
   * @param {!proto.yeying.api.identity.UnregisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.identity.UnregisterResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.identity.UnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.UnregisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.UnregisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.identity.IdentityClient.prototype.unregister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.identity.Identity/Unregister',
      request,
      metadata || {},
      methodDescriptor_Identity_Unregister,
      callback);
};


/**
 * @param {!proto.yeying.api.identity.UnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.identity.UnregisterResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.identity.IdentityPromiseClient.prototype.unregister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.identity.Identity/Unregister',
      request,
      metadata || {},
      methodDescriptor_Identity_Unregister);
};


module.exports = proto.yeying.api.identity;

