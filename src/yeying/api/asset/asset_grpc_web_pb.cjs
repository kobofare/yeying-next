/**
 * @fileoverview gRPC-Web generated client stub for yeying.api.asset
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.0
// source: yeying/api/asset/asset.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var yeying_api_common_message_pb = require('../../../yeying/api/common/message_pb.cjs')

var yeying_api_common_code_pb = require('../../../yeying/api/common/code_pb.cjs')
const proto = {};
proto.yeying = {};
proto.yeying.api = {};
proto.yeying.api.asset = require('./asset_pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.asset.AssetClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.asset.AssetPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.SearchRequest,
 *   !proto.yeying.api.asset.SearchResponse>}
 */
const methodDescriptor_Asset_Search = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Search',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.SearchRequest,
  proto.yeying.api.asset.SearchResponse,
  /**
   * @param {!proto.yeying.api.asset.SearchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.SearchResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.SearchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.SearchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.SearchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.search =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Search',
      request,
      metadata || {},
      methodDescriptor_Asset_Search,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.SearchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.SearchResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.search =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Search',
      request,
      metadata || {},
      methodDescriptor_Asset_Search);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.SignRequest,
 *   !proto.yeying.api.asset.SignResponse>}
 */
const methodDescriptor_Asset_Sign = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Sign',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.SignRequest,
  proto.yeying.api.asset.SignResponse,
  /**
   * @param {!proto.yeying.api.asset.SignRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.SignResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.SignRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.SignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.SignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.sign =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Sign',
      request,
      metadata || {},
      methodDescriptor_Asset_Sign,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.SignRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.SignResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.sign =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Sign',
      request,
      metadata || {},
      methodDescriptor_Asset_Sign);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.VersionRequest,
 *   !proto.yeying.api.asset.VersionResponse>}
 */
const methodDescriptor_Asset_Version = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Version',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.VersionRequest,
  proto.yeying.api.asset.VersionResponse,
  /**
   * @param {!proto.yeying.api.asset.VersionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.VersionResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.VersionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.VersionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.VersionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.version =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Version',
      request,
      metadata || {},
      methodDescriptor_Asset_Version,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.VersionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.VersionResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.version =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Version',
      request,
      metadata || {},
      methodDescriptor_Asset_Version);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.DetailRequest,
 *   !proto.yeying.api.asset.DetailResponse>}
 */
const methodDescriptor_Asset_Detail = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Detail',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.DetailRequest,
  proto.yeying.api.asset.DetailResponse,
  /**
   * @param {!proto.yeying.api.asset.DetailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.DetailResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.DetailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.DetailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.DetailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.detail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Detail',
      request,
      metadata || {},
      methodDescriptor_Asset_Detail,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.DetailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.DetailResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.detail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Detail',
      request,
      metadata || {},
      methodDescriptor_Asset_Detail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.RemoveRequest,
 *   !proto.yeying.api.asset.RemoveResponse>}
 */
const methodDescriptor_Asset_Remove = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Remove',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.RemoveRequest,
  proto.yeying.api.asset.RemoveResponse,
  /**
   * @param {!proto.yeying.api.asset.RemoveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.RemoveResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.RemoveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.RemoveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.RemoveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.remove =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Remove',
      request,
      metadata || {},
      methodDescriptor_Asset_Remove,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.RemoveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.RemoveResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.remove =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Remove',
      request,
      metadata || {},
      methodDescriptor_Asset_Remove);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.PutRequest,
 *   !proto.yeying.api.asset.PutResponse>}
 */
const methodDescriptor_Asset_Put = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Put',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.PutRequest,
  proto.yeying.api.asset.PutResponse,
  /**
   * @param {!proto.yeying.api.asset.PutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.PutResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.PutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.PutResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.PutResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.put =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Put',
      request,
      metadata || {},
      methodDescriptor_Asset_Put,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.PutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.PutResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.put =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Put',
      request,
      metadata || {},
      methodDescriptor_Asset_Put);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.GetRequest,
 *   !proto.yeying.api.asset.GetResponse>}
 */
const methodDescriptor_Asset_Get = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/Get',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.asset.GetRequest,
  proto.yeying.api.asset.GetResponse,
  /**
   * @param {!proto.yeying.api.asset.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.GetResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.GetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.GetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.asset.Asset/Get',
      request,
      metadata || {},
      methodDescriptor_Asset_Get,
      callback);
};


/**
 * @param {!proto.yeying.api.asset.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.asset.GetResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.asset.Asset/Get',
      request,
      metadata || {},
      methodDescriptor_Asset_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.asset.GetRequest,
 *   !proto.yeying.api.asset.StreamGetResponse>}
 */
const methodDescriptor_Asset_StreamGet = new grpc.web.MethodDescriptor(
  '/yeying.api.asset.Asset/StreamGet',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.yeying.api.asset.GetRequest,
  proto.yeying.api.asset.StreamGetResponse,
  /**
   * @param {!proto.yeying.api.asset.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.asset.StreamGetResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.asset.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.StreamGetResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetClient.prototype.streamGet =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.asset.Asset/StreamGet',
      request,
      metadata || {},
      methodDescriptor_Asset_StreamGet);
};


/**
 * @param {!proto.yeying.api.asset.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.StreamGetResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.asset.AssetPromiseClient.prototype.streamGet =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.asset.Asset/StreamGet',
      request,
      metadata || {},
      methodDescriptor_Asset_StreamGet);
};


module.exports = proto.yeying.api.asset;

