/**
 * @fileoverview gRPC-Web generated client stub for yeying.api.llm
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.0
// source: yeying/api/llm/llm.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var yeying_api_common_message_pb = require('../../../yeying/api/common/message_pb.cjs')

var yeying_api_common_code_pb = require('../../../yeying/api/common/code_pb.cjs')
const proto = {};
proto.yeying = {};
proto.yeying.api = {};
proto.yeying.api.llm = require('./llm_pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.llm.LlmClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.llm.LlmPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.AddLlmRequest,
 *   !proto.yeying.api.llm.AddLlmResponse>}
 */
const methodDescriptor_Llm_AddLlm = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/AddLlm',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.llm.AddLlmRequest,
  proto.yeying.api.llm.AddLlmResponse,
  /**
   * @param {!proto.yeying.api.llm.AddLlmRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.AddLlmResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.AddLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.llm.AddLlmResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.AddLlmResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.addLlm =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.llm.Llm/AddLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_AddLlm,
      callback);
};


/**
 * @param {!proto.yeying.api.llm.AddLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.llm.AddLlmResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.addLlm =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.llm.Llm/AddLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_AddLlm);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.DelLlmRequest,
 *   !proto.yeying.api.llm.DelLlmResponse>}
 */
const methodDescriptor_Llm_DelLlm = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/DelLlm',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.llm.DelLlmRequest,
  proto.yeying.api.llm.DelLlmResponse,
  /**
   * @param {!proto.yeying.api.llm.DelLlmRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.DelLlmResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.DelLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.llm.DelLlmResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.DelLlmResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.delLlm =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.llm.Llm/DelLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_DelLlm,
      callback);
};


/**
 * @param {!proto.yeying.api.llm.DelLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.llm.DelLlmResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.delLlm =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.llm.Llm/DelLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_DelLlm);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.GetLlmRequest,
 *   !proto.yeying.api.llm.GetLlmResponse>}
 */
const methodDescriptor_Llm_GetLlm = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/GetLlm',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.llm.GetLlmRequest,
  proto.yeying.api.llm.GetLlmResponse,
  /**
   * @param {!proto.yeying.api.llm.GetLlmRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.GetLlmResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.GetLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.llm.GetLlmResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.GetLlmResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.getLlm =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.llm.Llm/GetLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_GetLlm,
      callback);
};


/**
 * @param {!proto.yeying.api.llm.GetLlmRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.llm.GetLlmResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.getLlm =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.llm.Llm/GetLlm',
      request,
      metadata || {},
      methodDescriptor_Llm_GetLlm);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.TranslateRequest,
 *   !proto.yeying.api.llm.TranslateResponse>}
 */
const methodDescriptor_Llm_Translate = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/Translate',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.llm.TranslateRequest,
  proto.yeying.api.llm.TranslateResponse,
  /**
   * @param {!proto.yeying.api.llm.TranslateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.TranslateResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.TranslateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.llm.TranslateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.TranslateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.translate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.llm.Llm/Translate',
      request,
      metadata || {},
      methodDescriptor_Llm_Translate,
      callback);
};


/**
 * @param {!proto.yeying.api.llm.TranslateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.llm.TranslateResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.translate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.llm.Llm/Translate',
      request,
      metadata || {},
      methodDescriptor_Llm_Translate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.CompleteRequest,
 *   !proto.yeying.api.llm.CompleteResponse>}
 */
const methodDescriptor_Llm_Complete = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/Complete',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.yeying.api.llm.CompleteRequest,
  proto.yeying.api.llm.CompleteResponse,
  /**
   * @param {!proto.yeying.api.llm.CompleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.CompleteResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.CompleteRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.CompleteResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.complete =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Complete',
      request,
      metadata || {},
      methodDescriptor_Llm_Complete);
};


/**
 * @param {!proto.yeying.api.llm.CompleteRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.CompleteResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.complete =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Complete',
      request,
      metadata || {},
      methodDescriptor_Llm_Complete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.EditRequest,
 *   !proto.yeying.api.llm.EditResponse>}
 */
const methodDescriptor_Llm_Edit = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/Edit',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.yeying.api.llm.EditRequest,
  proto.yeying.api.llm.EditResponse,
  /**
   * @param {!proto.yeying.api.llm.EditRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.EditResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.EditRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.EditResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.edit =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Edit',
      request,
      metadata || {},
      methodDescriptor_Llm_Edit);
};


/**
 * @param {!proto.yeying.api.llm.EditRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.EditResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.edit =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Edit',
      request,
      metadata || {},
      methodDescriptor_Llm_Edit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.GenerateRequest,
 *   !proto.yeying.api.llm.GenerateResponse>}
 */
const methodDescriptor_Llm_Generate = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/Generate',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.yeying.api.llm.GenerateRequest,
  proto.yeying.api.llm.GenerateResponse,
  /**
   * @param {!proto.yeying.api.llm.GenerateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.GenerateResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.GenerateRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.GenerateResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.generate =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Generate',
      request,
      metadata || {},
      methodDescriptor_Llm_Generate);
};


/**
 * @param {!proto.yeying.api.llm.GenerateRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.GenerateResponse>}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.generate =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/yeying.api.llm.Llm/Generate',
      request,
      metadata || {},
      methodDescriptor_Llm_Generate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.llm.SpeechRequest,
 *   !proto.yeying.api.llm.SpeechResponse>}
 */
const methodDescriptor_Llm_Speech = new grpc.web.MethodDescriptor(
  '/yeying.api.llm.Llm/Speech',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.llm.SpeechRequest,
  proto.yeying.api.llm.SpeechResponse,
  /**
   * @param {!proto.yeying.api.llm.SpeechRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.llm.SpeechResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.llm.SpeechRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.llm.SpeechResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.llm.SpeechResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.llm.LlmClient.prototype.speech =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.llm.Llm/Speech',
      request,
      metadata || {},
      methodDescriptor_Llm_Speech,
      callback);
};


/**
 * @param {!proto.yeying.api.llm.SpeechRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.llm.SpeechResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.llm.LlmPromiseClient.prototype.speech =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.llm.Llm/Speech',
      request,
      metadata || {},
      methodDescriptor_Llm_Speech);
};


module.exports = proto.yeying.api.llm;

