/**
 * @fileoverview gRPC-Web generated client stub for yeying.api.user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.0
// source: yeying/api/user/user.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var yeying_api_common_message_pb = require('../../../yeying/api/common/message_pb.cjs')
const proto = {};
proto.yeying = {};
proto.yeying.api = {};
proto.yeying.api.user = require('./user_pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.user.UserClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yeying.api.user.UserPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.user.AddRequest,
 *   !proto.yeying.api.user.AddResponse>}
 */
const methodDescriptor_User_Add = new grpc.web.MethodDescriptor(
  '/yeying.api.user.User/Add',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.user.AddRequest,
  proto.yeying.api.user.AddResponse,
  /**
   * @param {!proto.yeying.api.user.AddRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.user.AddResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.user.AddRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.AddResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.AddResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.user.UserClient.prototype.add =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.user.User/Add',
      request,
      metadata || {},
      methodDescriptor_User_Add,
      callback);
};


/**
 * @param {!proto.yeying.api.user.AddRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.user.AddResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.user.UserPromiseClient.prototype.add =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.user.User/Add',
      request,
      metadata || {},
      methodDescriptor_User_Add);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.user.GetRequest,
 *   !proto.yeying.api.user.GetResponse>}
 */
const methodDescriptor_User_Get = new grpc.web.MethodDescriptor(
  '/yeying.api.user.User/Get',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.user.GetRequest,
  proto.yeying.api.user.GetResponse,
  /**
   * @param {!proto.yeying.api.user.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.user.GetResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.user.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.GetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.GetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.user.UserClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.user.User/Get',
      request,
      metadata || {},
      methodDescriptor_User_Get,
      callback);
};


/**
 * @param {!proto.yeying.api.user.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.user.GetResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.user.UserPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.user.User/Get',
      request,
      metadata || {},
      methodDescriptor_User_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.user.DelRequest,
 *   !proto.yeying.api.user.DelResponse>}
 */
const methodDescriptor_User_Del = new grpc.web.MethodDescriptor(
  '/yeying.api.user.User/Del',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.user.DelRequest,
  proto.yeying.api.user.DelResponse,
  /**
   * @param {!proto.yeying.api.user.DelRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.user.DelResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.user.DelRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.DelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.DelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.user.UserClient.prototype.del =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.user.User/Del',
      request,
      metadata || {},
      methodDescriptor_User_Del,
      callback);
};


/**
 * @param {!proto.yeying.api.user.DelRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.user.DelResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.user.UserPromiseClient.prototype.del =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.user.User/Del',
      request,
      metadata || {},
      methodDescriptor_User_Del);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yeying.api.user.ModRequest,
 *   !proto.yeying.api.user.ModResponse>}
 */
const methodDescriptor_User_Mod = new grpc.web.MethodDescriptor(
  '/yeying.api.user.User/Mod',
  grpc.web.MethodType.UNARY,
  proto.yeying.api.user.ModRequest,
  proto.yeying.api.user.ModResponse,
  /**
   * @param {!proto.yeying.api.user.ModRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yeying.api.user.ModResponse.deserializeBinary
);


/**
 * @param {!proto.yeying.api.user.ModRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.ModResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.ModResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yeying.api.user.UserClient.prototype.mod =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yeying.api.user.User/Mod',
      request,
      metadata || {},
      methodDescriptor_User_Mod,
      callback);
};


/**
 * @param {!proto.yeying.api.user.ModRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yeying.api.user.ModResponse>}
 *     Promise that resolves to the response
 */
proto.yeying.api.user.UserPromiseClient.prototype.mod =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yeying.api.user.User/Mod',
      request,
      metadata || {},
      methodDescriptor_User_Mod);
};


module.exports = proto.yeying.api.user;

