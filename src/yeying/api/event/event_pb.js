// source: yeying/api/event/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var yeying_api_common_message_pb = require('../../../yeying/api/common/message_pb.js');
goog.object.extend(proto, yeying_api_common_message_pb);
goog.exportSymbol('proto.yeying.api.event.ApplyActionEnum', null, global);
goog.exportSymbol('proto.yeying.api.event.ApplyContent', null, global);
goog.exportSymbol('proto.yeying.api.event.ApplyOpinion', null, global);
goog.exportSymbol('proto.yeying.api.event.ConsumeRequest', null, global);
goog.exportSymbol('proto.yeying.api.event.ConsumeRequestBody', null, global);
goog.exportSymbol('proto.yeying.api.event.ConsumeResponse', null, global);
goog.exportSymbol('proto.yeying.api.event.ConsumeResponseBody', null, global);
goog.exportSymbol('proto.yeying.api.event.CustomContent', null, global);
goog.exportSymbol('proto.yeying.api.event.CustomOpinion', null, global);
goog.exportSymbol('proto.yeying.api.event.EventMetadata', null, global);
goog.exportSymbol('proto.yeying.api.event.EventMetadata.ContentCase', null, global);
goog.exportSymbol('proto.yeying.api.event.EventMetadata.OpinionCase', null, global);
goog.exportSymbol('proto.yeying.api.event.EventSignature', null, global);
goog.exportSymbol('proto.yeying.api.event.EventTypeEnum', null, global);
goog.exportSymbol('proto.yeying.api.event.NotifyActionEnum', null, global);
goog.exportSymbol('proto.yeying.api.event.NotifyContent', null, global);
goog.exportSymbol('proto.yeying.api.event.NotifyItem', null, global);
goog.exportSymbol('proto.yeying.api.event.NotifyOpinion', null, global);
goog.exportSymbol('proto.yeying.api.event.ProduceRequest', null, global);
goog.exportSymbol('proto.yeying.api.event.ProduceRequestBody', null, global);
goog.exportSymbol('proto.yeying.api.event.ProduceResponse', null, global);
goog.exportSymbol('proto.yeying.api.event.ProduceResponseBody', null, global);
goog.exportSymbol('proto.yeying.api.event.SignatureObject', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.EventMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.event.EventMetadata.repeatedFields_, proto.yeying.api.event.EventMetadata.oneofGroups_);
};
goog.inherits(proto.yeying.api.event.EventMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.EventMetadata.displayName = 'proto.yeying.api.event.EventMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.SignatureObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.event.SignatureObject.repeatedFields_, null);
};
goog.inherits(proto.yeying.api.event.SignatureObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.SignatureObject.displayName = 'proto.yeying.api.event.SignatureObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.EventSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.event.EventSignature.repeatedFields_, null);
};
goog.inherits(proto.yeying.api.event.EventSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.EventSignature.displayName = 'proto.yeying.api.event.EventSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.CustomContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.CustomContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.CustomContent.displayName = 'proto.yeying.api.event.CustomContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ApplyContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ApplyContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ApplyContent.displayName = 'proto.yeying.api.event.ApplyContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.NotifyContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.event.NotifyContent.repeatedFields_, null);
};
goog.inherits(proto.yeying.api.event.NotifyContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.NotifyContent.displayName = 'proto.yeying.api.event.NotifyContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.NotifyItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.NotifyItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.NotifyItem.displayName = 'proto.yeying.api.event.NotifyItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ProduceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ProduceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ProduceRequest.displayName = 'proto.yeying.api.event.ProduceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ProduceRequestBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ProduceRequestBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ProduceRequestBody.displayName = 'proto.yeying.api.event.ProduceRequestBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ProduceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ProduceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ProduceResponse.displayName = 'proto.yeying.api.event.ProduceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ProduceResponseBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ProduceResponseBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ProduceResponseBody.displayName = 'proto.yeying.api.event.ProduceResponseBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ConsumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ConsumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ConsumeRequest.displayName = 'proto.yeying.api.event.ConsumeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ConsumeRequestBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ConsumeRequestBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ConsumeRequestBody.displayName = 'proto.yeying.api.event.ConsumeRequestBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.NotifyOpinion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.NotifyOpinion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.NotifyOpinion.displayName = 'proto.yeying.api.event.NotifyOpinion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ApplyOpinion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ApplyOpinion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ApplyOpinion.displayName = 'proto.yeying.api.event.ApplyOpinion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.CustomOpinion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.CustomOpinion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.CustomOpinion.displayName = 'proto.yeying.api.event.CustomOpinion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ConsumeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ConsumeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ConsumeResponse.displayName = 'proto.yeying.api.event.ConsumeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yeying.api.event.ConsumeResponseBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yeying.api.event.ConsumeResponseBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yeying.api.event.ConsumeResponseBody.displayName = 'proto.yeying.api.event.ConsumeResponseBody';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yeying.api.event.EventMetadata.repeatedFields_ = [3,4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.yeying.api.event.EventMetadata.oneofGroups_ = [[9,10,11],[12,13,14]];

/**
 * @enum {number}
 */
proto.yeying.api.event.EventMetadata.ContentCase = {
  CONTENT_NOT_SET: 0,
  NOTIFYCONTENT: 9,
  APPLYCONTENT: 10,
  CUSTOMCONTENT: 11
};

/**
 * @return {proto.yeying.api.event.EventMetadata.ContentCase}
 */
proto.yeying.api.event.EventMetadata.prototype.getContentCase = function() {
  return /** @type {proto.yeying.api.event.EventMetadata.ContentCase} */(jspb.Message.computeOneofCase(this, proto.yeying.api.event.EventMetadata.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.yeying.api.event.EventMetadata.OpinionCase = {
  OPINION_NOT_SET: 0,
  NOTIFYOPINION: 12,
  APPLYOPINION: 13,
  CUSTOMOPINION: 14
};

/**
 * @return {proto.yeying.api.event.EventMetadata.OpinionCase}
 */
proto.yeying.api.event.EventMetadata.prototype.getOpinionCase = function() {
  return /** @type {proto.yeying.api.event.EventMetadata.OpinionCase} */(jspb.Message.computeOneofCase(this, proto.yeying.api.event.EventMetadata.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.EventMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.EventMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.EventMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.EventMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    producersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    consumersList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    signature: (f = msg.getSignature()) && proto.yeying.api.event.EventSignature.toObject(includeInstance, f),
    extend: jspb.Message.getFieldWithDefault(msg, 6, ""),
    created: jspb.Message.getFieldWithDefault(msg, 7, ""),
    processed: jspb.Message.getFieldWithDefault(msg, 8, ""),
    notifycontent: (f = msg.getNotifycontent()) && proto.yeying.api.event.NotifyContent.toObject(includeInstance, f),
    applycontent: (f = msg.getApplycontent()) && proto.yeying.api.event.ApplyContent.toObject(includeInstance, f),
    customcontent: (f = msg.getCustomcontent()) && proto.yeying.api.event.CustomContent.toObject(includeInstance, f),
    notifyopinion: (f = msg.getNotifyopinion()) && proto.yeying.api.event.NotifyOpinion.toObject(includeInstance, f),
    applyopinion: (f = msg.getApplyopinion()) && proto.yeying.api.event.ApplyOpinion.toObject(includeInstance, f),
    customopinion: (f = msg.getCustomopinion()) && proto.yeying.api.event.CustomOpinion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.EventMetadata}
 */
proto.yeying.api.event.EventMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.EventMetadata;
  return proto.yeying.api.event.EventMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.EventMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.EventMetadata}
 */
proto.yeying.api.event.EventMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {!proto.yeying.api.event.EventTypeEnum} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addProducers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsumers(value);
      break;
    case 5:
      var value = new proto.yeying.api.event.EventSignature;
      reader.readMessage(value,proto.yeying.api.event.EventSignature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtend(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessed(value);
      break;
    case 9:
      var value = new proto.yeying.api.event.NotifyContent;
      reader.readMessage(value,proto.yeying.api.event.NotifyContent.deserializeBinaryFromReader);
      msg.setNotifycontent(value);
      break;
    case 10:
      var value = new proto.yeying.api.event.ApplyContent;
      reader.readMessage(value,proto.yeying.api.event.ApplyContent.deserializeBinaryFromReader);
      msg.setApplycontent(value);
      break;
    case 11:
      var value = new proto.yeying.api.event.CustomContent;
      reader.readMessage(value,proto.yeying.api.event.CustomContent.deserializeBinaryFromReader);
      msg.setCustomcontent(value);
      break;
    case 12:
      var value = new proto.yeying.api.event.NotifyOpinion;
      reader.readMessage(value,proto.yeying.api.event.NotifyOpinion.deserializeBinaryFromReader);
      msg.setNotifyopinion(value);
      break;
    case 13:
      var value = new proto.yeying.api.event.ApplyOpinion;
      reader.readMessage(value,proto.yeying.api.event.ApplyOpinion.deserializeBinaryFromReader);
      msg.setApplyopinion(value);
      break;
    case 14:
      var value = new proto.yeying.api.event.CustomOpinion;
      reader.readMessage(value,proto.yeying.api.event.CustomOpinion.deserializeBinaryFromReader);
      msg.setCustomopinion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.EventMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.EventMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.EventMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.EventMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProducersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.yeying.api.event.EventSignature.serializeBinaryToWriter
    );
  }
  f = message.getExtend();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProcessed();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNotifycontent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.yeying.api.event.NotifyContent.serializeBinaryToWriter
    );
  }
  f = message.getApplycontent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.yeying.api.event.ApplyContent.serializeBinaryToWriter
    );
  }
  f = message.getCustomcontent();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.yeying.api.event.CustomContent.serializeBinaryToWriter
    );
  }
  f = message.getNotifyopinion();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.yeying.api.event.NotifyOpinion.serializeBinaryToWriter
    );
  }
  f = message.getApplyopinion();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.yeying.api.event.ApplyOpinion.serializeBinaryToWriter
    );
  }
  f = message.getCustomopinion();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.yeying.api.event.CustomOpinion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.yeying.api.event.EventMetadata.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EventTypeEnum type = 2;
 * @return {!proto.yeying.api.event.EventTypeEnum}
 */
proto.yeying.api.event.EventMetadata.prototype.getType = function() {
  return /** @type {!proto.yeying.api.event.EventTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yeying.api.event.EventTypeEnum} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string producers = 3;
 * @return {!Array<string>}
 */
proto.yeying.api.event.EventMetadata.prototype.getProducersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setProducersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.addProducers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearProducersList = function() {
  return this.setProducersList([]);
};


/**
 * repeated string consumers = 4;
 * @return {!Array<string>}
 */
proto.yeying.api.event.EventMetadata.prototype.getConsumersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setConsumersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.addConsumers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearConsumersList = function() {
  return this.setConsumersList([]);
};


/**
 * optional EventSignature signature = 5;
 * @return {?proto.yeying.api.event.EventSignature}
 */
proto.yeying.api.event.EventMetadata.prototype.getSignature = function() {
  return /** @type{?proto.yeying.api.event.EventSignature} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.EventSignature, 5));
};


/**
 * @param {?proto.yeying.api.event.EventSignature|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string extend = 6;
 * @return {string}
 */
proto.yeying.api.event.EventMetadata.prototype.getExtend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setExtend = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string created = 7;
 * @return {string}
 */
proto.yeying.api.event.EventMetadata.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string processed = 8;
 * @return {string}
 */
proto.yeying.api.event.EventMetadata.prototype.getProcessed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.setProcessed = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional NotifyContent notifyContent = 9;
 * @return {?proto.yeying.api.event.NotifyContent}
 */
proto.yeying.api.event.EventMetadata.prototype.getNotifycontent = function() {
  return /** @type{?proto.yeying.api.event.NotifyContent} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.NotifyContent, 9));
};


/**
 * @param {?proto.yeying.api.event.NotifyContent|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setNotifycontent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.yeying.api.event.EventMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearNotifycontent = function() {
  return this.setNotifycontent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasNotifycontent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ApplyContent applyContent = 10;
 * @return {?proto.yeying.api.event.ApplyContent}
 */
proto.yeying.api.event.EventMetadata.prototype.getApplycontent = function() {
  return /** @type{?proto.yeying.api.event.ApplyContent} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ApplyContent, 10));
};


/**
 * @param {?proto.yeying.api.event.ApplyContent|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setApplycontent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.yeying.api.event.EventMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearApplycontent = function() {
  return this.setApplycontent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasApplycontent = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CustomContent customContent = 11;
 * @return {?proto.yeying.api.event.CustomContent}
 */
proto.yeying.api.event.EventMetadata.prototype.getCustomcontent = function() {
  return /** @type{?proto.yeying.api.event.CustomContent} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.CustomContent, 11));
};


/**
 * @param {?proto.yeying.api.event.CustomContent|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setCustomcontent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.yeying.api.event.EventMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearCustomcontent = function() {
  return this.setCustomcontent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasCustomcontent = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NotifyOpinion notifyOpinion = 12;
 * @return {?proto.yeying.api.event.NotifyOpinion}
 */
proto.yeying.api.event.EventMetadata.prototype.getNotifyopinion = function() {
  return /** @type{?proto.yeying.api.event.NotifyOpinion} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.NotifyOpinion, 12));
};


/**
 * @param {?proto.yeying.api.event.NotifyOpinion|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setNotifyopinion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.yeying.api.event.EventMetadata.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearNotifyopinion = function() {
  return this.setNotifyopinion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasNotifyopinion = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ApplyOpinion applyOpinion = 13;
 * @return {?proto.yeying.api.event.ApplyOpinion}
 */
proto.yeying.api.event.EventMetadata.prototype.getApplyopinion = function() {
  return /** @type{?proto.yeying.api.event.ApplyOpinion} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ApplyOpinion, 13));
};


/**
 * @param {?proto.yeying.api.event.ApplyOpinion|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setApplyopinion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.yeying.api.event.EventMetadata.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearApplyopinion = function() {
  return this.setApplyopinion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasApplyopinion = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CustomOpinion customOpinion = 14;
 * @return {?proto.yeying.api.event.CustomOpinion}
 */
proto.yeying.api.event.EventMetadata.prototype.getCustomopinion = function() {
  return /** @type{?proto.yeying.api.event.CustomOpinion} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.CustomOpinion, 14));
};


/**
 * @param {?proto.yeying.api.event.CustomOpinion|undefined} value
 * @return {!proto.yeying.api.event.EventMetadata} returns this
*/
proto.yeying.api.event.EventMetadata.prototype.setCustomopinion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.yeying.api.event.EventMetadata.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.EventMetadata} returns this
 */
proto.yeying.api.event.EventMetadata.prototype.clearCustomopinion = function() {
  return this.setCustomopinion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.EventMetadata.prototype.hasCustomopinion = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yeying.api.event.SignatureObject.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.SignatureObject.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.SignatureObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.SignatureObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.SignatureObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    producersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    consumersList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    signature: msg.getSignature_asB64(),
    extend: jspb.Message.getFieldWithDefault(msg, 6, ""),
    created: jspb.Message.getFieldWithDefault(msg, 7, ""),
    processed: jspb.Message.getFieldWithDefault(msg, 8, ""),
    opinion: msg.getOpinion_asB64(),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.SignatureObject}
 */
proto.yeying.api.event.SignatureObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.SignatureObject;
  return proto.yeying.api.event.SignatureObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.SignatureObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.SignatureObject}
 */
proto.yeying.api.event.SignatureObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {!proto.yeying.api.event.EventTypeEnum} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addProducers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsumers(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtend(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessed(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpinion(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.SignatureObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.SignatureObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.SignatureObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.SignatureObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProducersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getExtend();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProcessed();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOpinion_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EventTypeEnum type = 2;
 * @return {!proto.yeying.api.event.EventTypeEnum}
 */
proto.yeying.api.event.SignatureObject.prototype.getType = function() {
  return /** @type {!proto.yeying.api.event.EventTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yeying.api.event.EventTypeEnum} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string producers = 3;
 * @return {!Array<string>}
 */
proto.yeying.api.event.SignatureObject.prototype.getProducersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setProducersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.addProducers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.clearProducersList = function() {
  return this.setProducersList([]);
};


/**
 * repeated string consumers = 4;
 * @return {!Array<string>}
 */
proto.yeying.api.event.SignatureObject.prototype.getConsumersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setConsumersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.addConsumers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.clearConsumersList = function() {
  return this.setConsumersList([]);
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.yeying.api.event.SignatureObject.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.yeying.api.event.SignatureObject.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string extend = 6;
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getExtend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setExtend = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string created = 7;
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string processed = 8;
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getProcessed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setProcessed = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes opinion = 9;
 * @return {!(string|Uint8Array)}
 */
proto.yeying.api.event.SignatureObject.prototype.getOpinion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes opinion = 9;
 * This is a type-conversion wrapper around `getOpinion()`
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getOpinion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpinion()));
};


/**
 * optional bytes opinion = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpinion()`
 * @return {!Uint8Array}
 */
proto.yeying.api.event.SignatureObject.prototype.getOpinion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpinion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setOpinion = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes content = 10;
 * @return {!(string|Uint8Array)}
 */
proto.yeying.api.event.SignatureObject.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes content = 10;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.yeying.api.event.SignatureObject.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.yeying.api.event.SignatureObject.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.yeying.api.event.SignatureObject} returns this
 */
proto.yeying.api.event.SignatureObject.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yeying.api.event.EventSignature.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.EventSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.EventSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.EventSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.EventSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    producersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    consumersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.EventSignature}
 */
proto.yeying.api.event.EventSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.EventSignature;
  return proto.yeying.api.event.EventSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.EventSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.EventSignature}
 */
proto.yeying.api.event.EventSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addProducers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsumers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.EventSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.EventSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.EventSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.EventSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProducersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string producers = 1;
 * @return {!Array<string>}
 */
proto.yeying.api.event.EventSignature.prototype.getProducersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.setProducersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.addProducers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.clearProducersList = function() {
  return this.setProducersList([]);
};


/**
 * repeated string consumers = 2;
 * @return {!Array<string>}
 */
proto.yeying.api.event.EventSignature.prototype.getConsumersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.setConsumersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.addConsumers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.EventSignature} returns this
 */
proto.yeying.api.event.EventSignature.prototype.clearConsumersList = function() {
  return this.setConsumersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.CustomContent.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.CustomContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.CustomContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.CustomContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    object: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.CustomContent}
 */
proto.yeying.api.event.CustomContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.CustomContent;
  return proto.yeying.api.event.CustomContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.CustomContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.CustomContent}
 */
proto.yeying.api.event.CustomContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.CustomContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.CustomContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.CustomContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.CustomContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.yeying.api.event.CustomContent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.CustomContent} returns this
 */
proto.yeying.api.event.CustomContent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string object = 2;
 * @return {string}
 */
proto.yeying.api.event.CustomContent.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.CustomContent} returns this
 */
proto.yeying.api.event.CustomContent.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ApplyContent.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ApplyContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ApplyContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ApplyContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    applier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ApplyContent}
 */
proto.yeying.api.event.ApplyContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ApplyContent;
  return proto.yeying.api.event.ApplyContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ApplyContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ApplyContent}
 */
proto.yeying.api.event.ApplyContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ApplyContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ApplyContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ApplyContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ApplyContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string applier = 1;
 * @return {string}
 */
proto.yeying.api.event.ApplyContent.prototype.getApplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.ApplyContent} returns this
 */
proto.yeying.api.event.ApplyContent.prototype.setApplier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yeying.api.event.NotifyContent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.NotifyContent.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.NotifyContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.NotifyContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.yeying.api.event.NotifyItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.NotifyContent}
 */
proto.yeying.api.event.NotifyContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.NotifyContent;
  return proto.yeying.api.event.NotifyContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.NotifyContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.NotifyContent}
 */
proto.yeying.api.event.NotifyContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.yeying.api.event.NotifyItem;
      reader.readMessage(value,proto.yeying.api.event.NotifyItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.NotifyContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.NotifyContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.NotifyContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.yeying.api.event.NotifyItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.yeying.api.event.NotifyContent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.NotifyContent} returns this
 */
proto.yeying.api.event.NotifyContent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated NotifyItem items = 2;
 * @return {!Array<!proto.yeying.api.event.NotifyItem>}
 */
proto.yeying.api.event.NotifyContent.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.yeying.api.event.NotifyItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.event.NotifyItem, 2));
};


/**
 * @param {!Array<!proto.yeying.api.event.NotifyItem>} value
 * @return {!proto.yeying.api.event.NotifyContent} returns this
*/
proto.yeying.api.event.NotifyContent.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.yeying.api.event.NotifyItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.yeying.api.event.NotifyItem}
 */
proto.yeying.api.event.NotifyContent.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.event.NotifyItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yeying.api.event.NotifyContent} returns this
 */
proto.yeying.api.event.NotifyContent.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.NotifyItem.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.NotifyItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.NotifyItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.NotifyItem}
 */
proto.yeying.api.event.NotifyItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.NotifyItem;
  return proto.yeying.api.event.NotifyItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.NotifyItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.NotifyItem}
 */
proto.yeying.api.event.NotifyItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {!proto.yeying.api.event.NotifyActionEnum} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.NotifyItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.NotifyItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.NotifyItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.yeying.api.event.NotifyItem.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.NotifyItem} returns this
 */
proto.yeying.api.event.NotifyItem.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotifyActionEnum action = 2;
 * @return {!proto.yeying.api.event.NotifyActionEnum}
 */
proto.yeying.api.event.NotifyItem.prototype.getAction = function() {
  return /** @type {!proto.yeying.api.event.NotifyActionEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yeying.api.event.NotifyActionEnum} value
 * @return {!proto.yeying.api.event.NotifyItem} returns this
 */
proto.yeying.api.event.NotifyItem.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ProduceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ProduceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ProduceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.yeying.api.event.ProduceRequestBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ProduceRequest}
 */
proto.yeying.api.event.ProduceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ProduceRequest;
  return proto.yeying.api.event.ProduceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ProduceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ProduceRequest}
 */
proto.yeying.api.event.ProduceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.MessageHeader;
      reader.readMessage(value,yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.yeying.api.event.ProduceRequestBody;
      reader.readMessage(value,proto.yeying.api.event.ProduceRequestBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ProduceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ProduceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ProduceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.yeying.api.event.ProduceRequestBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.MessageHeader header = 1;
 * @return {?proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.event.ProduceRequest.prototype.getHeader = function() {
  return /** @type{?proto.yeying.api.common.MessageHeader} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1));
};


/**
 * @param {?proto.yeying.api.common.MessageHeader|undefined} value
 * @return {!proto.yeying.api.event.ProduceRequest} returns this
*/
proto.yeying.api.event.ProduceRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceRequest} returns this
 */
proto.yeying.api.event.ProduceRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProduceRequestBody body = 2;
 * @return {?proto.yeying.api.event.ProduceRequestBody}
 */
proto.yeying.api.event.ProduceRequest.prototype.getBody = function() {
  return /** @type{?proto.yeying.api.event.ProduceRequestBody} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ProduceRequestBody, 2));
};


/**
 * @param {?proto.yeying.api.event.ProduceRequestBody|undefined} value
 * @return {!proto.yeying.api.event.ProduceRequest} returns this
*/
proto.yeying.api.event.ProduceRequest.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceRequest} returns this
 */
proto.yeying.api.event.ProduceRequest.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ProduceRequestBody.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ProduceRequestBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ProduceRequestBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceRequestBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.yeying.api.event.EventMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ProduceRequestBody}
 */
proto.yeying.api.event.ProduceRequestBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ProduceRequestBody;
  return proto.yeying.api.event.ProduceRequestBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ProduceRequestBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ProduceRequestBody}
 */
proto.yeying.api.event.ProduceRequestBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.yeying.api.event.EventMetadata;
      reader.readMessage(value,proto.yeying.api.event.EventMetadata.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ProduceRequestBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ProduceRequestBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ProduceRequestBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceRequestBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.yeying.api.event.EventMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventMetadata event = 1;
 * @return {?proto.yeying.api.event.EventMetadata}
 */
proto.yeying.api.event.ProduceRequestBody.prototype.getEvent = function() {
  return /** @type{?proto.yeying.api.event.EventMetadata} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.EventMetadata, 1));
};


/**
 * @param {?proto.yeying.api.event.EventMetadata|undefined} value
 * @return {!proto.yeying.api.event.ProduceRequestBody} returns this
*/
proto.yeying.api.event.ProduceRequestBody.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceRequestBody} returns this
 */
proto.yeying.api.event.ProduceRequestBody.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceRequestBody.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ProduceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ProduceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ProduceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.yeying.api.event.ProduceResponseBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ProduceResponse}
 */
proto.yeying.api.event.ProduceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ProduceResponse;
  return proto.yeying.api.event.ProduceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ProduceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ProduceResponse}
 */
proto.yeying.api.event.ProduceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.MessageHeader;
      reader.readMessage(value,yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.yeying.api.event.ProduceResponseBody;
      reader.readMessage(value,proto.yeying.api.event.ProduceResponseBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ProduceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ProduceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ProduceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.yeying.api.event.ProduceResponseBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.MessageHeader header = 1;
 * @return {?proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.event.ProduceResponse.prototype.getHeader = function() {
  return /** @type{?proto.yeying.api.common.MessageHeader} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1));
};


/**
 * @param {?proto.yeying.api.common.MessageHeader|undefined} value
 * @return {!proto.yeying.api.event.ProduceResponse} returns this
*/
proto.yeying.api.event.ProduceResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceResponse} returns this
 */
proto.yeying.api.event.ProduceResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProduceResponseBody body = 2;
 * @return {?proto.yeying.api.event.ProduceResponseBody}
 */
proto.yeying.api.event.ProduceResponse.prototype.getBody = function() {
  return /** @type{?proto.yeying.api.event.ProduceResponseBody} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ProduceResponseBody, 2));
};


/**
 * @param {?proto.yeying.api.event.ProduceResponseBody|undefined} value
 * @return {!proto.yeying.api.event.ProduceResponse} returns this
*/
proto.yeying.api.event.ProduceResponse.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceResponse} returns this
 */
proto.yeying.api.event.ProduceResponse.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceResponse.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ProduceResponseBody.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ProduceResponseBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ProduceResponseBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceResponseBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ProduceResponseBody}
 */
proto.yeying.api.event.ProduceResponseBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ProduceResponseBody;
  return proto.yeying.api.event.ProduceResponseBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ProduceResponseBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ProduceResponseBody}
 */
proto.yeying.api.event.ProduceResponseBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.ResponseStatus;
      reader.readMessage(value,yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ProduceResponseBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ProduceResponseBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ProduceResponseBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ProduceResponseBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.ResponseStatus status = 1;
 * @return {?proto.yeying.api.common.ResponseStatus}
 */
proto.yeying.api.event.ProduceResponseBody.prototype.getStatus = function() {
  return /** @type{?proto.yeying.api.common.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1));
};


/**
 * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
 * @return {!proto.yeying.api.event.ProduceResponseBody} returns this
*/
proto.yeying.api.event.ProduceResponseBody.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ProduceResponseBody} returns this
 */
proto.yeying.api.event.ProduceResponseBody.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ProduceResponseBody.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ConsumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ConsumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ConsumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.yeying.api.event.ConsumeRequestBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ConsumeRequest}
 */
proto.yeying.api.event.ConsumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ConsumeRequest;
  return proto.yeying.api.event.ConsumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ConsumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ConsumeRequest}
 */
proto.yeying.api.event.ConsumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.MessageHeader;
      reader.readMessage(value,yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.yeying.api.event.ConsumeRequestBody;
      reader.readMessage(value,proto.yeying.api.event.ConsumeRequestBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ConsumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ConsumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ConsumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.yeying.api.event.ConsumeRequestBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.MessageHeader header = 1;
 * @return {?proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.event.ConsumeRequest.prototype.getHeader = function() {
  return /** @type{?proto.yeying.api.common.MessageHeader} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1));
};


/**
 * @param {?proto.yeying.api.common.MessageHeader|undefined} value
 * @return {!proto.yeying.api.event.ConsumeRequest} returns this
*/
proto.yeying.api.event.ConsumeRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeRequest} returns this
 */
proto.yeying.api.event.ConsumeRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConsumeRequestBody body = 2;
 * @return {?proto.yeying.api.event.ConsumeRequestBody}
 */
proto.yeying.api.event.ConsumeRequest.prototype.getBody = function() {
  return /** @type{?proto.yeying.api.event.ConsumeRequestBody} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ConsumeRequestBody, 2));
};


/**
 * @param {?proto.yeying.api.event.ConsumeRequestBody|undefined} value
 * @return {!proto.yeying.api.event.ConsumeRequest} returns this
*/
proto.yeying.api.event.ConsumeRequest.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeRequest} returns this
 */
proto.yeying.api.event.ConsumeRequest.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ConsumeRequestBody.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ConsumeRequestBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ConsumeRequestBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeRequestBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.yeying.api.event.EventMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ConsumeRequestBody}
 */
proto.yeying.api.event.ConsumeRequestBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ConsumeRequestBody;
  return proto.yeying.api.event.ConsumeRequestBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ConsumeRequestBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ConsumeRequestBody}
 */
proto.yeying.api.event.ConsumeRequestBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.yeying.api.event.EventMetadata;
      reader.readMessage(value,proto.yeying.api.event.EventMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ConsumeRequestBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ConsumeRequestBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ConsumeRequestBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeRequestBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.yeying.api.event.EventMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventMetadata metadata = 1;
 * @return {?proto.yeying.api.event.EventMetadata}
 */
proto.yeying.api.event.ConsumeRequestBody.prototype.getMetadata = function() {
  return /** @type{?proto.yeying.api.event.EventMetadata} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.EventMetadata, 1));
};


/**
 * @param {?proto.yeying.api.event.EventMetadata|undefined} value
 * @return {!proto.yeying.api.event.ConsumeRequestBody} returns this
*/
proto.yeying.api.event.ConsumeRequestBody.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeRequestBody} returns this
 */
proto.yeying.api.event.ConsumeRequestBody.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeRequestBody.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.NotifyOpinion.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.NotifyOpinion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.NotifyOpinion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyOpinion.toObject = function(includeInstance, msg) {
  var f, obj = {
    processed: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.NotifyOpinion}
 */
proto.yeying.api.event.NotifyOpinion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.NotifyOpinion;
  return proto.yeying.api.event.NotifyOpinion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.NotifyOpinion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.NotifyOpinion}
 */
proto.yeying.api.event.NotifyOpinion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.NotifyOpinion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.NotifyOpinion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.NotifyOpinion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.NotifyOpinion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string processed = 1;
 * @return {string}
 */
proto.yeying.api.event.NotifyOpinion.prototype.getProcessed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.NotifyOpinion} returns this
 */
proto.yeying.api.event.NotifyOpinion.prototype.setProcessed = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ApplyOpinion.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ApplyOpinion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ApplyOpinion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ApplyOpinion.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cause: jspb.Message.getFieldWithDefault(msg, 2, ""),
    processed: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ApplyOpinion}
 */
proto.yeying.api.event.ApplyOpinion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ApplyOpinion;
  return proto.yeying.api.event.ApplyOpinion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ApplyOpinion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ApplyOpinion}
 */
proto.yeying.api.event.ApplyOpinion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yeying.api.event.ApplyActionEnum} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCause(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ApplyOpinion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ApplyOpinion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ApplyOpinion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ApplyOpinion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCause();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProcessed();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ApplyActionEnum action = 1;
 * @return {!proto.yeying.api.event.ApplyActionEnum}
 */
proto.yeying.api.event.ApplyOpinion.prototype.getAction = function() {
  return /** @type {!proto.yeying.api.event.ApplyActionEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yeying.api.event.ApplyActionEnum} value
 * @return {!proto.yeying.api.event.ApplyOpinion} returns this
 */
proto.yeying.api.event.ApplyOpinion.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string cause = 2;
 * @return {string}
 */
proto.yeying.api.event.ApplyOpinion.prototype.getCause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.ApplyOpinion} returns this
 */
proto.yeying.api.event.ApplyOpinion.prototype.setCause = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string processed = 3;
 * @return {string}
 */
proto.yeying.api.event.ApplyOpinion.prototype.getProcessed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.ApplyOpinion} returns this
 */
proto.yeying.api.event.ApplyOpinion.prototype.setProcessed = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.CustomOpinion.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.CustomOpinion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.CustomOpinion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.CustomOpinion.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    object: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.CustomOpinion}
 */
proto.yeying.api.event.CustomOpinion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.CustomOpinion;
  return proto.yeying.api.event.CustomOpinion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.CustomOpinion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.CustomOpinion}
 */
proto.yeying.api.event.CustomOpinion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.CustomOpinion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.CustomOpinion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.CustomOpinion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.CustomOpinion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.yeying.api.event.CustomOpinion.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.CustomOpinion} returns this
 */
proto.yeying.api.event.CustomOpinion.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string object = 2;
 * @return {string}
 */
proto.yeying.api.event.CustomOpinion.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yeying.api.event.CustomOpinion} returns this
 */
proto.yeying.api.event.CustomOpinion.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ConsumeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ConsumeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ConsumeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.yeying.api.event.ConsumeResponseBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ConsumeResponse}
 */
proto.yeying.api.event.ConsumeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ConsumeResponse;
  return proto.yeying.api.event.ConsumeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ConsumeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ConsumeResponse}
 */
proto.yeying.api.event.ConsumeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.MessageHeader;
      reader.readMessage(value,yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.yeying.api.event.ConsumeResponseBody;
      reader.readMessage(value,proto.yeying.api.event.ConsumeResponseBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ConsumeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ConsumeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ConsumeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.yeying.api.event.ConsumeResponseBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.MessageHeader header = 1;
 * @return {?proto.yeying.api.common.MessageHeader}
 */
proto.yeying.api.event.ConsumeResponse.prototype.getHeader = function() {
  return /** @type{?proto.yeying.api.common.MessageHeader} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1));
};


/**
 * @param {?proto.yeying.api.common.MessageHeader|undefined} value
 * @return {!proto.yeying.api.event.ConsumeResponse} returns this
*/
proto.yeying.api.event.ConsumeResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeResponse} returns this
 */
proto.yeying.api.event.ConsumeResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConsumeResponseBody body = 2;
 * @return {?proto.yeying.api.event.ConsumeResponseBody}
 */
proto.yeying.api.event.ConsumeResponse.prototype.getBody = function() {
  return /** @type{?proto.yeying.api.event.ConsumeResponseBody} */ (
    jspb.Message.getWrapperField(this, proto.yeying.api.event.ConsumeResponseBody, 2));
};


/**
 * @param {?proto.yeying.api.event.ConsumeResponseBody|undefined} value
 * @return {!proto.yeying.api.event.ConsumeResponse} returns this
*/
proto.yeying.api.event.ConsumeResponse.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeResponse} returns this
 */
proto.yeying.api.event.ConsumeResponse.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeResponse.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yeying.api.event.ConsumeResponseBody.prototype.toObject = function(opt_includeInstance) {
  return proto.yeying.api.event.ConsumeResponseBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yeying.api.event.ConsumeResponseBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeResponseBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yeying.api.event.ConsumeResponseBody}
 */
proto.yeying.api.event.ConsumeResponseBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yeying.api.event.ConsumeResponseBody;
  return proto.yeying.api.event.ConsumeResponseBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yeying.api.event.ConsumeResponseBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yeying.api.event.ConsumeResponseBody}
 */
proto.yeying.api.event.ConsumeResponseBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new yeying_api_common_message_pb.ResponseStatus;
      reader.readMessage(value,yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yeying.api.event.ConsumeResponseBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yeying.api.event.ConsumeResponseBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yeying.api.event.ConsumeResponseBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yeying.api.event.ConsumeResponseBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional yeying.api.common.ResponseStatus status = 1;
 * @return {?proto.yeying.api.common.ResponseStatus}
 */
proto.yeying.api.event.ConsumeResponseBody.prototype.getStatus = function() {
  return /** @type{?proto.yeying.api.common.ResponseStatus} */ (
    jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1));
};


/**
 * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
 * @return {!proto.yeying.api.event.ConsumeResponseBody} returns this
*/
proto.yeying.api.event.ConsumeResponseBody.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yeying.api.event.ConsumeResponseBody} returns this
 */
proto.yeying.api.event.ConsumeResponseBody.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yeying.api.event.ConsumeResponseBody.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.yeying.api.event.EventTypeEnum = {
  EVENT_TYPE_UNKNOWN: 0,
  EVENT_TYPE_REMIND: 1,
  EVENT_TYPE_NOTIFY: 2,
  EVENT_TYPE_APPLY: 3,
  EVENT_TYPE_CUSTOM: 4
};

/**
 * @enum {number}
 */
proto.yeying.api.event.ApplyActionEnum = {
  APPLY_ACTION_UNKNOWN: 0,
  APPLY_ACTION_PASSED: 1,
  APPLY_ACTION_REFUSED: 2
};

/**
 * @enum {number}
 */
proto.yeying.api.event.NotifyActionEnum = {
  NOTIFY_ACTION_UNKNOWN: 0,
  NOTIFY_ACTION_ADD: 1,
  NOTIFY_ACTION_DEL: 2,
  NOTIFY_ACTION_MOD: 3
};

goog.object.extend(exports, proto.yeying.api.event);
